/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/
#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
bool check_valid(char string[6], char input);
char color[6]={"RBOYPG"};
bool game_over=false;
char answer[4]={};
char code[4]={};
char marker[4]={};
int game_round = 1;

//This function is used in other draw functions to plot individual pixels
void plot_pixel(const int x, const int y, const short int line_color);

//This function is used when switching between screens (tutorial -> game -> won/lost game screen)
void clear_screen();

//This function draws an empty game board
void drawGame();

//This function updates the colors of the pins & markers based on the current round
void drawColumns(int round);

//This function draws the tutorial screen
void drawTutorial();

//Win screen
void drawWinScreen();

//Lose screen
void drawLostScreen();

int main()
{
    
    /* Read location of the pixel buffer from the pixel buffer controller */
    volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    pixel_buffer_start = *pixel_ctrl_ptr;
    
    srand(time(0));
    for(int i = 0; i<4; i++){
        code[i] = color[rand()%6];
        printf("%c\t",code[i]);
    } 
	printf("\n");
    while(!game_over){
        if(game_round == 3){
            game_over = true;
            printf("Game Over!\n");
			return 0;
        } 
        printf("Round %d:\n",game_round);
		printf("AVAILABLE COLORS: %s\n", color);
		printf("Please input colors: \n");
		for(int i = 0; i<4; i++){			
        	scanf(" %c", &answer[i]);
		}
		bool valid;
		enter_input:
		printf("YOUR INPUT:\n");
		for(int i = 0; i<4; i++){
		    valid=check_valid(color, answer[i]);
		    if(!valid){
		        strcpy(answer,"");
		        goto enter_input;
		    }
        	printf("%c\t", answer[i]);
		}
		printf("\n");
		char check[4]={};
		strcpy(check, code);
		strcpy(marker, "");
		for(int i = 0; i<4; i++){
		    if(answer[i]==check[i]){
		        marker[i]='R';
		        check[i]='0';
		        answer[i]='0';
		    }
		}
		for(int i = 0; i<4; i++){
        	if(check[i] != '0'){
        	    for(int j = 0;j<4;j++){
        	        if(answer[j]!='0'){
        	            if(check[i]==answer[j]){
        	                marker[i]='W';
        	                break;
        	            }else{
        	                marker[i]='E';
        	            }
        	        }
        	    }
        	}
		}
		printf("Result:\n");
		for(int i = 0; i<4; i++){
        	printf("%c\t", marker[i]);
		}
		printf("\n");
		char correct[4];
		strcpy(correct, "RRRR");
		if(strcmp(marker,correct)==0){
		    game_over=true;
		    printf("YOU WIN");
		}
        game_round++;
    }
    return 0;
}

bool check_valid(char string[6], char input){
    char *check_input;
    check_input=strchr(string,input);
	if(check_input==NULL){
	    printf("Invalid input: %c", input);
	    printf("\n");
	    return false;
	}else{
	    return true;
	}
}

void plot_pixel(const int x, const int y, const short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen()
{
    int x = 0, y = 0;

    for (x = 0; x < 320; ++x)
    {
        for (y = 0; y < 240; ++y)
        {
            plot_pixel(x, y, 0x0000);
        }
    }
}
