/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <stdbool.h>
#include <string.h>
bool check_valid(char string[6], char input);
char color[6]={"RBOYPG"};
bool game_over=false;
char input[50]={};
char answer[4]={};
char code[4]={};
char marker[4]={};
int game_round = 1;
int maxRounds;
volatile int pixel_buffer_start;

/* Draw utility functions */
//This function is used in other draw functions to plot individual pixels
void plot_pixel(const int x, const int y, const short int line_color);

//This function is used when switching between screens (tutorial -> game -> won/lost game screen)
void clear_screen();

/*Draw functions*/
//This function draws an empty game board
void drawGame(int maxRounds);

//This function updates the colors of the pins & markers based on the current round
void drawColumns(int round, int maxRounds);

//This function draws the tutorial screen. It will indicate to the user to enter the difficulty from the keyboard
//0 easy = 12 rounds, 1 medium = 9 rounds, 2 hard = 7 rounds, 3 extreme = 5 rounds
void drawTutorial();

//Win screen
void drawWinScreen();

//Lose screen
void drawLostScreen();

int main()
{
    /* Read location of the pixel buffer from the pixel buffer controller */
    //volatile int * pixel_ctrl_ptr = (int *)0xFF203020;
    //pixel_buffer_start = *pixel_ctrl_ptr;
    
    drawTutorial();
    
    drawGame(maxRounds);
    
    //initiate random generator and generate code
    srand(time(0));
    for(int i = 0; i<4; i++){
        code[i] = color[rand()%6];
        printf("%c\t",code[i]);
    } 
	printf("\n");
    while(!game_over){
        //max number of rounds passed, game over
        if(game_round == maxRounds+1){
            game_over = true;
            printf("Game Over!\n");
            drawLostScreen();
			return 0;
        } 
        printf("Round %d:\n",game_round);
        enter_input:
		printf("AVAILABLE COLORS: %s\n", color);
		printf("Please input colors: \n");
		scanf("%s", &input);
		int input_length = strlen(input);
		//check if input is valid
		if(input_length != 4){
		    printf("Please enter 4 colors.\n");
		    goto enter_input;
		}
		printf("YOUR INPUT:\n");
		for(int i = 0; i<4; i++){
		    answer[i]=input[i];
		    bool valid=check_valid(color, answer[i]);
		    if(!valid){
		        strcpy(answer,"");
		        goto enter_input;
		    }
        	printf("%c\t", answer[i]);
		}
		printf("\n");
		//check the input and give hints of the answer
		char check[4]={};
		strcpy(check, code);
		strcpy(marker, "");
		for(int i = 0; i<4; i++){
		    if(answer[i]==check[i]){
		        marker[i]='R';
		        check[i]='0';
		        answer[i]='0';
		    }
		}
		for(int i = 0; i<4; i++){
        	if(check[i] != '0'){
        	    for(int j = 0;j<4;j++){
        	        if(answer[j]!='0'){
        	            if(check[i]==answer[j]){
        	                marker[i]='W';
        	                break;
        	            }else{
        	                marker[i]='E';
        	            }
        	        }
        	    }
        	}
		}
		//display the results
		printf("Result:\n");
		for(int i = 0; i<4; i++){
        	printf("%c\t", marker[i]);
		}
		printf("\n");
		//if all hints are red, game is won
		char correct[4];
		strcpy(correct, "RRRR");
		if(strcmp(marker,correct)==0){
		    game_over=true;
		    printf("YOU WIN");
		    drawWinScreen();
		}
        game_round++;
    }
    return 0;
}

//check if the input color is valid
bool check_valid(char string[6], char input){
    char *check_input;
    check_input=strchr(string,input);
	if(check_input==NULL){
	    printf("Invalid input: %c", input);
	    printf("\n");
	    return false;
	}else{
	    return true;
	}
}

void plot_pixel(const int x, const int y, const short int line_color)
{
    *(short int *)(pixel_buffer_start + (y << 10) + (x << 1)) = line_color;
}

void clear_screen()
{
    int x = 0, y = 0;

    for (x = 0; x < 320; ++x)
    {
        for (y = 0; y < 240; ++y)
        {
            plot_pixel(x, y, 0x0000);
        }
    }
}

void drawTutorial(){
    //Draw tutorial screen
    int difficulty;
    re_enter:
    printf("Enter difficulty: 0 = easy, 1 = medium, 2 = hard, 3 = extreme\n");
    scanf("%d", &difficulty);
    switch(difficulty){
        case 0:
            maxRounds = 12;
            break;
        case 1:
            maxRounds = 10;
            break;
        case 2:
            maxRounds = 8;
            break;
        case 3:
            maxRounds = 5;
            break;
        default:
            printf("Invalid input: %d\n", difficulty);
            goto re_enter;
    }
}

void drawWinScreen(){
    //Should draw "You win"
}

void drawLostScreen(){
    //Should draw "You lose"
}

void drawGame(int maxRounds){
    //Based on the maxRounds, draws an appropriate amount of columns to be filled
}

void drawColumns(int round, int maxRounds){
    //Max rounds used to know how the board has been drawn / positions of the columns
    //Round is used to determine which column to draw on
    
    //Checks the marker array and draws 4 markers
    //Checks the code array and draws the 4 pins
}
